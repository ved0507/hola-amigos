README.md 
Devops
1. Continuous integration - helps in automating the nuild process enabling frequent integration Quality check and testing
2. continuous delivery - extension to CI validation and verifying the automation rediness through usage of appropriate tools

People ------------------- process ------------ technology

SOLID
Single responsibility principle - class should have only one reason to change
Open closed principle - open to extension closed to modification
liskov substitution principle - function pointers or ref to base classes must be able to use object of derived class without knowing

interface segrigation principle - client should not use interface that they dont use
dependency inversion principle - THere should not be any dependency between high level and low level modules

todo
keyboard practice  55 min
learn new language 45 min



java usees JIT just in time  to convert text into bytecodes

oops concepts
Inheritance
encpsulation
polymorphisam
abstraction


ABSTRCTION - HIDE THE UNWANTED
what is abstract class?
abstract - is selecting the data  from larger pool and showing only relavant data to object

class Bank
info- name ,address ,number ,tax info, favfood ,maritialstatus ,qualification, favactor, favmovie
we may not need to show fav food,  actor , movie
So sending useful data from the above pool is abstraction

abstract class
a class which is declared as abstract is called abstract class
a normal class cannot be abstrcty class

abstract method - a method without body is abstract method
must be declared ion abstract class. ONLY A signiture

differences ENCAPSULATION AND ABSTRACTION AND INTERFACE
points of Abstraction
0. solves at design level
1. It is about hiding unwanted details and showing most essential information
2. focus on what info obj must contain
3. it can have both abstract and non abstract
4. doesnt support multiple inheritnce
5. it can have protected and public method
6. it can have final, static and final static var wth any access specifier

points of encapsulation:
0. solves at implementation level
1. hiding the code and data into single unit
2. hiding details of how much obj does something for security reasons

points on INTERFACE
0. only public static final variable
1. only abstract method
2. support multiple inheritance
3. only public abstract method
 
 pros
 1. allows you to communicate with related classed as siblings
 2. reduce complexity of design and implementaion
 
 
polymorphisam
what is ploymorphisam
INtroduction to polymorphism
ability of object behaving differently for same method is called polymorphism

types of polymorphism
static and dynamic 
static
1. method over loading 
2. uses compile time binding 
3. method invoked is based on the reference type 
dynamic 
1. Method overriding 
2. uses Run time binding 
3. Method invoked based on object type 

public class Loan{
public static void main(String args[]){
int tenure;
double principle;
float interest;
String accounnumber;

Loan(){
tenure=10;
interest=8.5f;
}
public double EMIreturn(int tenure,double interst){
return 200;}

}
public double EMIreturn(int tenure,double principle){
return 200;}

}
}

NOTE: return type of method is not consider for overloading 


METHOD OVERRIDING
Method overriding 
Dynamic method dispatch 
runtime polymorphism


Method and constructor
1. constructor is invoked implicitly
2. it is used to initialize state of an objects
3. constructor name must be same as class name

Method
1. used to expose the behaviour of the obj
2. must have a return type
3. invoked implicitly
4. method may or may not be same as class name

Static variable is used to refer comman property of all obj

This keyword refer to the current obj
or current class obj

question 54 and polymorphism
TOBE CONTINUED







Variable is a container
holds the value while java program is getting executed
variable assigned with data type
three types of variables
static
local 
instance



Local variable declared inside the body of method 
Can be used within the method
It cannot be defined with static keyword

Instance decalred inside class but outside method
its instance specific values cannot be shared among instance

static variable
declared static 
cannot be local
memory allocation happens only once


class Addition{
public static void main(String args[])
{
int a =10;
int b =12;
int c =a+b;
System.out.println("vaule"+ c)
}}



Widening
class Sample{
public static void main(String args[])
{
int a =10;
float f=a;
Sysatem.out.println(a)
Sysatem.out.println(f)
}}

Narrowing - Typecasting
class Sample{
public static void main(String args[])
{
float f=10.5f;
//if we define int a=f;//compile time error
int a=int(f);
System.out.println(a)
System.out.println(f)
}}


Overflow
class Sample{
public static void main(String args[])
{
int a =130;
byte b=(byte)a;
System.out.println(a)
System.out.println(b)
}}
out: 130
-126

Adding lower type

class Sample{
public static void main(String args[])
{
int a =10;
float f=a;
System.out.println(a)
System.out.println(f)
}}


===========
Data types

Primitive Data types
- boolean int float short double

Non-Primitive Data types 
- String Class array interfaces


FUNFACT: Java is a typed programming language it means al variables must be declared 
before using it


